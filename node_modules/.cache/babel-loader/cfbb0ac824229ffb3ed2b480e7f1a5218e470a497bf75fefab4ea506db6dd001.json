{"ast":null,"code":"var _jsxFileName = \"/Users/artursaahov/Desktop/\\u043F\\u0440\\u043E\\u0435\\u043A\\u0442\\u044B /todo_project/todo_intership/src/components/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Route, Routes, Link } from \"react-router-dom\";\nimport Todo from \"./Todo\"; // Убедитесь, что путь правильный\nimport Profiles from \"./Profiles\"; // Убедитесь, что путь правильный\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [selectedProfile, setSelectedProfile] = useState(() => {\n    return localStorage.getItem(\"selectedProfile\") || \"\";\n  });\n  const [todos, setTodos] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [profiles, setProfiles] = useState([]); // Состояние для профилей\n\n  const handleProfileChange = profile => {\n    setSelectedProfile(profile);\n    localStorage.setItem(\"selectedProfile\", profile); // Сохраняем выбранный профиль\n  };\n  useEffect(() => {\n    const fetchProfiles = async () => {\n      try {\n        const response = await fetch('https://dummyjson.com/users'); // Используйте правильный API для получения профилей\n        const data = await response.json();\n        setProfiles(data.users || []); // Убедитесь, что data.users содержит массив пользователей\n      } catch (error) {\n        console.error(\"Error fetching profiles:\", error);\n      }\n    };\n    fetchProfiles(); // Получаем профили при загрузке\n  }, []);\n  useEffect(() => {\n    const fetchTodos = async () => {\n      if (selectedProfile) {\n        console.log(\"Fetching todos for profile:\", selectedProfile); // Отладочный лог\n        try {\n          const response = await fetch(`https://dummyjson.com/todos/user/${selectedProfile}`);\n          if (!response.ok) {\n            throw new Error(\"Network response was not ok\");\n          }\n          const data = await response.json();\n          console.log(\"Fetched todos:\", data.todos); // Отладочный лог\n          setTodos(data.todos || []); // Убедитесь, что устанавливаете пустой массив, если data.todos не определено\n          setCurrentPage(1); // Сбрасываем страницу при смене профиля\n        } catch (error) {\n          console.error(\"Error fetching todos:\", error);\n          setTodos([]); // Очищаем список задач при ошибке\n        }\n      }\n    };\n    fetchTodos();\n  }, [selectedProfile]);\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        children: \"Todo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/profiles\",\n        children: \"Profiles\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(Todo, {\n          todos: todos,\n          currentPage: currentPage,\n          setCurrentPage: setCurrentPage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/profiles\",\n        element: /*#__PURE__*/_jsxDEV(Profiles, {\n          profiles: profiles,\n          onProfileChange: handleProfileChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 42\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"3TpF+5CjFQoKO6p+K4I2aNf7Vts=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Route","Routes","Link","Todo","Profiles","jsxDEV","_jsxDEV","App","_s","selectedProfile","setSelectedProfile","localStorage","getItem","todos","setTodos","currentPage","setCurrentPage","profiles","setProfiles","handleProfileChange","profile","setItem","fetchProfiles","response","fetch","data","json","users","error","console","fetchTodos","log","ok","Error","children","to","fileName","_jsxFileName","lineNumber","columnNumber","path","element","onProfileChange","_c","$RefreshReg$"],"sources":["/Users/artursaahov/Desktop/проекты /todo_project/todo_intership/src/components/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Route, Routes, Link } from \"react-router-dom\";\nimport Todo from \"./Todo\"; // Убедитесь, что путь правильный\nimport Profiles from \"./Profiles\"; // Убедитесь, что путь правильный\n\nfunction App() {\n  const [selectedProfile, setSelectedProfile] = useState(() => {\n    return localStorage.getItem(\"selectedProfile\") || \"\";\n  });\n  const [todos, setTodos] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [profiles, setProfiles] = useState([]); // Состояние для профилей\n\n  const handleProfileChange = (profile) => {\n    setSelectedProfile(profile);\n    localStorage.setItem(\"selectedProfile\", profile); // Сохраняем выбранный профиль\n  };\n\n  useEffect(() => {\n    const fetchProfiles = async () => {\n      try {\n        const response = await fetch('https://dummyjson.com/users'); // Используйте правильный API для получения профилей\n        const data = await response.json();\n        setProfiles(data.users || []); // Убедитесь, что data.users содержит массив пользователей\n      } catch (error) {\n        console.error(\"Error fetching profiles:\", error);\n      }\n    };\n\n    fetchProfiles(); // Получаем профили при загрузке\n  }, []);\n\n  useEffect(() => {\n    const fetchTodos = async () => {\n      if (selectedProfile) {\n        console.log(\"Fetching todos for profile:\", selectedProfile); // Отладочный лог\n        try {\n          const response = await fetch(`https://dummyjson.com/todos/user/${selectedProfile}`);\n          if (!response.ok) {\n            throw new Error(\"Network response was not ok\");\n          }\n          const data = await response.json();\n          console.log(\"Fetched todos:\", data.todos); // Отладочный лог\n          setTodos(data.todos || []); // Убедитесь, что устанавливаете пустой массив, если data.todos не определено\n          setCurrentPage(1); // Сбрасываем страницу при смене профиля\n        } catch (error) {\n          console.error(\"Error fetching todos:\", error);\n          setTodos([]); // Очищаем список задач при ошибке\n        }\n      }\n    };\n\n    fetchTodos();\n  }, [selectedProfile]);\n\n  return (\n    <Router>\n      <nav>\n        <Link to=\"/\">Todo</Link>\n        <Link to=\"/profiles\">Profiles</Link>\n      </nav>\n      <Routes>\n        <Route path=\"/\" element={<Todo todos={todos} currentPage={currentPage} setCurrentPage={setCurrentPage} />} />\n        <Route path=\"/profiles\" element={<Profiles profiles={profiles} onProfileChange={handleProfileChange} />} />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}